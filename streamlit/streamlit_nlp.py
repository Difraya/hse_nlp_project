# -*- coding: utf-8 -*-
"""streamlit_nlp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14KmmWiiFOS9c78dpposR_Bnjg07TjwM5
"""

import streamlit as st
import requests
import plotly.express as px
import plotly.graph_objects as go
import re
import json
from collections import Counter
from nltk.util import ngrams
from nltk.tokenize import word_tokenize
import nltk
nltk.download("punkt")

st.set_page_config(page_title="Авторство текстов", layout="wide")
pages = ["Пользовательская часть", "Инфа про модели и данные", "Обучи свою модель"]
choice = st.sidebar.selectbox("Навигация", pages)

def get_top_words(text, n=10):
    words = re.findall(r"\w+", text.lower())
    c = Counter(words).most_common(n)
    return c

def get_ngrams(text, n):
    tokens = word_tokenize(text.lower())
    n_grams = list(ngrams(tokens, n))
    return n_grams

def most_common_ngrams(ngrams_list, top_n=3):
    counter = Counter(ngrams_list)
    return counter.most_common(top_n)

if choice == "Пользовательская часть":
    st.title("Пользовательская часть")
    txt = st.text_area("Введите текст")
    if txt:
      st.subheader("Анализ текста")
      ngram_type = st.selectbox("Выберите тип n-грамм:", ["Униграммы", "Биграммы", "Триграммы"])
      if ngram_type == "Униграммы":
        n = 1
      elif ngram_type == "Биграммы":
        n = 2
      else:
        n = 3
      ngrams_list = get_ngrams(text, n)
      top_ngrams = most_common_ngrams(ngrams_list)
      st.subheader(f"Самые популярные {ngram_type.lower()}:")

      if top_ngrams:
        labels = [' '.join(gram) for gram, count in top_ngrams]
        counts = [count for gram, count in top_ngrams]
        fig, ax = plt.subplots()
        ax.bar(labels, counts, color='skyblue')
        ax.set_ylabel("Частота")
        ax.set_title(f"Топ-3 {ngram_type.lower()}")
        ax.set_xticks(range(len(labels)))
        ax.set_xticklabels(labels, rotation=45, ha="right")
        st.pyplot(fig)
      else:
        st.write("Недостаточно данных для построения графика.")

      w = get_top_words(txt)
      x = [i[0] for i in w]
      y = [i[1] for i in w]
      fig = px.bar(x=x, y=y, title="Топ слов")
      st.plotly_chart(fig, use_container_width=True)

    if st.button("Предсказать автора"):
        r = requests.post("http://127.0.0.1:8000/PredictItem", json={"text": txt})
        st.write(r.json())
  #      w = get_top_words(txt)
   #     x = [i[0] for i in w]
    #    y = [i[1] for i in w]
     #   fig = px.bar(x=x, y=y, title="Топ слов")
      #  st.plotly_chart(fig, use_container_width=True)
    upfile = st.file_uploader("Загрузите файл (JSON) для мультиинференса")
    if st.button("Предсказать для нескольких текстов"):
        if upfile is not None:
            r = requests.post("http://127.0.0.1:8000/PredictItemsFile", files={"request": upfile})
            st.write(r.json())

elif choice == "Инфа про модели и данные":
    st.title("Инфа про модели и данные")
    st.write("Список доступных моделей")
    ml = requests.get("http://127.0.0.1:8000/ModelsList")
    st.write(ml.json())
    st.write("Авторы в обучающем датасете (пример)")
    fig1 = px.bar(x=["Автор1", "Автор2", "Автор3"], y=[100, 80, 50], title="Количество текстов")
    st.plotly_chart(fig1, use_container_width=True)
    st.write("Пример EDA")
    fig2 = go.Figure(data=go.Scatter(x=[1,2,3,4,5], y=[10,4,6,3,8], mode='lines+markers'))
    st.plotly_chart(fig2, use_container_width=True)

elif choice == "Обучи свою модель":
    st.title("Обучи свою модель")
    data_file = st.file_uploader("Загрузите датасет для обучения")
    if st.button("Запуск обучения"):
        st.write("Идет обучение...")
        st.write("Модель обучена")
    st.write("Аналитика")
    fig3 = px.line(x=[1,2,3,4], y=[0.6,0.7,0.8,0.95], title="Кривая обучения")
    st.plotly_chart(fig3, use_container_width=True)
    st.write("Инференс новой моделью")
    txt_new = st.text_area("Введите текст")
    if st.button("Предсказать новой моделью"):
        st.write("Предсказан автор: ...")